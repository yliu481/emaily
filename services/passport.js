const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');
const atob = require('atob');


const parseJWT = (token)=>{
    var base64Url = token.split('.')[1];
    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
    return JSON.parse(jsonPayload);
}

const User = mongoose.model('users');

passport.serializeUser((user, done)=>{//serializeUser determine which data of the user object should be stored in the session.
    done(null, user.id)// user.id is saved in the session as req.session.passport.user, it is the id generated by mongo, not the google id
});

passport.deserializeUser((id, done)=>{
    User.findById(id)
    .then(user=>{
        done(null, user); //user object attaches to the request as req.user
    })
});

passport.use(
    new GoogleStrategy(
        {
            clientID: keys.googleClientID,
            clientSecret: keys.googleClientSecret,
            callbackURL: '/auth/google/callback',
            proxy: true
        }, 
        async (accessToken, refreshToken, profile, email, done)=>{
            const profileSub = parseJWT(profile.id_token)["sub"];
            const existingUser = await User.findOne({ googleID: profileSub});
            if(existingUser){
                //we already have a record with teh given profile ID
               return done(null, existingUser);
            }
            //don't have a user record with this ID, make a new record
            const user = await new User({googleID: profileSub}).save()
            done(null, user)
            
        }
    )
);//generic registerï¼Œ